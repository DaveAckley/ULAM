## -*- mode:ulam -*-
#=t41261_test_compiler_constantclassarray_issue
##
## gen output: 2 asserts
##
## /home/elenas/WORK/ulam/repo/MFM-fork/MFM/src/core/include/UlamRef.tcc:20: FAILED: ILLEGAL_ARGUMENT
##
#!
Exit status: 0
Ue_KeyExprRep { KeyExprNode m_key( typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(1u);  Unsigned(8) m_rightIndex(2u);  Unsigned(8) m_keyCode(0u);  Unsigned(8) m_op(124u); );  Int(32) test() {  System s;  m_key keyexpr_x13 0 [] = s ( m_key m_rightIndex . 2u cast == )assert . s ( keyexpr_x13 1 [] m_rightIndex . 4u cast == )assert . 0 cast return } }
Uq_KeyExprNode { typedef Unsigned(8) Byte;  Unsigned(8) m_leftIndex(0);  Unsigned(8) m_rightIndex(0);  Unsigned(8) m_keyCode(0);  Unsigned(8) m_op(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
## ish, informed by Dave 3/18/18 (blew an assertion); constant class array not implemented yet.
##
#>KeyExprRep.ulam
  ulam 3;
use KeyExprNode; //with use, assert hits; ow ./KeyExprNode.ulam:9:0: ERROR: Invalid size (-2) to set for primitive type: 0Holder.
local constant KeyExprNode keyexpr_x13[] = {
   { .m_leftIndex = 1, .m_rightIndex = 2, .m_keyCode = 0, .m_op = '|' }, // [0]
   { .m_leftIndex = 3, .m_rightIndex = 4, .m_keyCode = 0, .m_op = '&' }, // [1]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'c', .m_op = 0 }, // [2]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'a', .m_op = 0 }, // [3]
   { .m_leftIndex = 0, .m_rightIndex = 0, .m_keyCode = 'b', .m_op = 0 }, // [4] , EXTRA COMMA at the end??? no difference
 };
element KeyExprRep {
  KeyExprNode m_key;
  Int test() {
    System s;
    m_key = keyexpr_x13[0]; //displayed in eval output
    s.assert(m_key.m_rightIndex==2u);

    s.assert(keyexpr_x13[1].m_rightIndex==4u); //reads constant class array item
    return 0;
  }
}

#:KeyExprNode.ulam
  ulam 3;
quark KeyExprNode {
  typedef Unsigned(8) Byte;
  Byte m_leftIndex;  // for [,|&~]
  Byte m_rightIndex; // for [,|&]
  Byte m_keyCode;    // [a-zA-Z.@_?] or 0
  Byte m_op;         // [,|&~] or 0
}

#:System.ulam
  ulam 1;
quark System {
  Void print(Unsigned arg) native;
  Void print(Int arg) native;
  Void print(Int(4) arg) native;
  Void print(Int(3) arg) native;
  Void print(Unary(3) arg) native;
  Void print(Bool(3) arg) native;
  Void assert(Bool b) native;
}
#.
