## -*- mode:ulam -*-
#=t41161_test_compiler_elementinheritedquark_superpurevirtualfunccall_issue
##
## gen output:
##  Unsigned Arg: 45264
##  Bool(3) Arg: 0x7 (true)
##  Unary(3) Arg: 0x3 (+assert)
##  Int Arg: 1 (+assert)
##
#!
./Bondo.ulam:6:13: ERROR: (2) Virtual function 'Uf_4func10' is pure; cannot be called for eval.
Exit status: -1
Unrecoverable Program Test FAILURE.
##
## informed by Dave ish 10/19/19; cannot recreate with this simplified test.
## eval fails, but gen code is fine.
##
#>QBond.ulam
 ulam 3;
quark QBond
{
  virtual Int func(); //pure
}

#:Bond.ulam
  ulam 3;
quark Bond(Bits cBOND_TYPE, Bool cBOND_SIDE, Unary(3) cMAX_BOND_LEN=1) : System
{
  Int forsure() {
    print((Unsigned) cBOND_TYPE);
    print(cBOND_SIDE);
    print(cMAX_BOND_LEN);
    return cBOND_SIDE ? 1 : 0;
  }
}

#:Bondo.ulam
  ulam 2;
quark Bondo : QBond + System{
  Int m_fun;
  Void behave()
  {
    m_fun = func();  // should be fine, not pure error
    assert(m_fun == 1);
  }
}

#:MidBondo.ulam
  ulam 5;

local typedef Bond(0xb0d0,true,3u) BondoFrom;
local typedef Bond(0xb0d0,false,3u) BondoTo;

element MidBondo : Bondo + BondoFrom + BondoTo
{
  Int test()
  {
    System s;
    self.Bondo.behave(); //same problem!! so simple too..
    s.print(m_fun);
    s.assert(m_fun == 1);
    return 0;
  }

  @Override
    Int func() {
    return self.BondoFrom.forsure(); //=1
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
